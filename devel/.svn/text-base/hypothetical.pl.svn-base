#!/usr/local/bin/perl

=head1 NAME
    
    .pl
    
=head1 USAGE

    .pl [-]-results_path <results_path> [-]-infile <infile> [-]-project_code <project_code>

=head1 REQUIRED ARGUMENTS

=over

=item [-]-infile  <infile>

file containing a full path list of all multifasta files to process through the pipeline.

=for Euclid:
    infile.type: readable

=item [-]-results_path  <results_path>

full path to the location results files should be written

=for Euclid:
    results_path.type: string

=item [-]-project_code  <project_code>

charge code for using the grid

=for Euclid:
    project_code.type: string
    
=back

=head1 OPTIONS

=over

=item [-]-queue  <queue>

Specifies a queue for the grid jobs
   
=for Euclid:
    queue.type: string

=item [-]-config  <config>

Specifies a config file (ini format) used to overide standard pipeline configurations and default parameters

=for Euclid:
	config.type: string
	
=back

=head1 DESCRIPTION

This script will run .

=cut

use strict;
use Config::IniFiles;
use FindBin;
require "$FindBin::Bin/mg_lib.pl";

use lib "/usr/local/devel/VIRIFX/software/VGD/lib";
use Getopt::Euclid 0.2.4 qw(:vars);

my $list = $ARGV_infile;
my $results_path = $ARGV_results_path;
my $queue = $ARGV_queue;
my $config = $ARGV_config;
my $grid_code = $ARGV_project_code;

my $program_path = $0;
my @prog = split '/', $program_path;
my $program = pop @prog;
my $input_type = "Hypothetical";
my @files;

my $cfg;
if ($config) {
	$cfg = Config::IniFiles->new( -file => "$config" ) || die "cannot parse user suplied config file.\n";
}
my $path = &get_lib_path($cfg);

my $id_rep = "$results_path/id_repository";
system("touch $id_rep");

my $parser = "$FindBin::Bin/camera_parse_annotation_results_to_text_table.pl";
my $shell_config = "$FindBin::Bin/etc/shell.config";
my $shell_template = &write_shell_template($shell_config,$path,$results_path);

open (IN, $list) || die "Cannot open $list. $!\n";
while (<IN>) {
	chomp $_;
	if (-e $_) {
		push @files, $_;
	} else {
		die "$_ does not exist.\n";
	}
}
close IN;

foreach my $file (@files) {
	system "cp $file $results_path";
	my @parts = split '/', $file;
	my $in_name = pop @parts;
	my $infile = "$results_path/$in_name";
	$in_name =~ s/.fasta//;
	my $outfile = "$results_path/hypothetical_results.$in_name.btab";

	my $parsed_file = &run_parser_script($shell_template,$results_path,$infile,$parser,$results_path,$input_type);

}